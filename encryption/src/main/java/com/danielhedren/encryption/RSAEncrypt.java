package com.danielhedren.encryption;

import android.text.style.TabStopSpan;
import android.util.Base64;
import android.util.Log;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import javax.crypto.Cipher;

/**
 * Utility class for generating keys, encrypting and decrypting
 */
public class RSAEncrypt {
    private static final String ALGORITHM = "RSA";
    private static final int KEY_SIZE = 4096;

    /**
     * Generates a new RSA keypair
     * @return The new KeyPair
     **/
    public static KeyPair generateKeyPair() {
        KeyPairGenerator keyPairGenerator;

        try {
            keyPairGenerator = KeyPairGenerator.getInstance(ALGORITHM);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }

        keyPairGenerator.initialize(KEY_SIZE);
        return keyPairGenerator.generateKeyPair();
    }

    /**
     * Encrypt some data with the given key
     */
    public static byte[] encrypt(final byte[] messageBytes, Key key) throws Exception {
        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.ENCRYPT_MODE, key);
        byte[] encryptedBytes = cipher.doFinal(messageBytes);

        return encryptedBytes;
    }

    /**
     * Attempt to decrypt some data with the given key
     */
    public static byte[] decrypt(final byte[] messageBytes, Key key) throws Exception {
        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, key);
        byte[] decryptedBytes = cipher.doFinal(messageBytes);

        return decryptedBytes;
    }

    /**
     * Digests some data and returns the hash
     * @param data Data to hash
     * @return 32 byte hash
     */
    public static byte[] getSHA256Digest(byte[] data) {
        MessageDigest messageDigest;
        try {
            messageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            return null;
        }

        return messageDigest.digest(data);
    }

    /**
     * Converts a key to a string for storage
     */
    public static String keyToString(Key key) {
        return Base64.encodeToString(key.getEncoded(), Base64.NO_WRAP);
    }

    /**
     * Converts a string generated by keyToString to a public key
     */
    public static PublicKey stringToPublicKey(String keyString) {
        KeyFactory keyFactory;

        try {
            keyFactory = KeyFactory.getInstance(ALGORITHM);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }

        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(Base64.decode(keyString, Base64.NO_WRAP));
        PublicKey publicKey;
        try {
            publicKey = keyFactory.generatePublic(publicKeySpec);
        } catch (InvalidKeySpecException e) {
            e.printStackTrace();
            return null;
        }

        return publicKey;
    }

    /**
     * Converts a string generated by keyToString to a private key
     */
    public static PrivateKey stringToPrivateKey(String keyString) {
        KeyFactory keyFactory;

        try {
            keyFactory = KeyFactory.getInstance(ALGORITHM);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }

        PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(Base64.decode(keyString, Base64.NO_WRAP));
        PrivateKey privateKey;
        try {
            privateKey = keyFactory.generatePrivate(privateKeySpec);
        } catch (InvalidKeySpecException e) {
            e.printStackTrace();
            return null;
        }

        return privateKey;
    }
}
